[gd_resource type="VisualShader" load_steps=3 format=2]

[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/3d/dither.gd" type="Script" id=1]

[sub_resource type="VisualShaderNodeCustom" id=1]
default_input_values = [ 0, 1.0 ]
initialized = true
script = ExtResource( 1 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;



// Dither

void dither(in vec4 fragcoord, in float fade, out float alpha_scissor) {
	int x = int(int(fragcoord.x) % 4);
	int y = int(int(fragcoord.y) % 4);
	int index = x + y * 4;
	float limit = 0.0;

	if (x < 8) {
		if (index == 0) limit = 0.0625;
		if (index == 1) limit = 0.5625;
		if (index == 2) limit = 0.1875;
		if (index == 3) limit = 0.6875;
		if (index == 4) limit = 0.8125;
		if (index == 5) limit = 0.3125;
		if (index == 6) limit = 0.9375;
		if (index == 7) limit = 0.4375;
		if (index == 8) limit = 0.25;
		if (index == 9) limit = 0.75;
		if (index == 10) limit = 0.125;
		if (index == 11) limit = 0.625;
		if (index == 12) limit = 1.0;
		if (index == 13) limit = 0.5;
		if (index == 14) limit = 0.875;
		if (index == 15) limit = 0.375;
	}
	// Workaround: Use alpha scissor > 1 for discarding because shader nodes without output will not included
	alpha_scissor = 0.0;
	if (fade < limit) {
		alpha_scissor = 1.1;
		//Discard;
	}
}

void vertex() {
// Output:0

}

void fragment() {
// Dither:2
	float n_in2p0 = 1.00000;
	float n_out2p0;
	{
		dither(FRAGCOORD, n_in2p0, n_out2p0);
	}

// Output:0
	ALPHA_SCISSOR = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -145, 347.5 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 100, 540 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 18 )
